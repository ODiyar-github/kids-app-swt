# --- Allgemeine Anwendungseinstellungen ---
# spring.application.name
# Definiert den Namen der Spring Boot Anwendung. Dieser Name wird oft für Logging,
# Metriken und Service Discovery verwendet.
spring.application.name=demo

# server.port
# Definiert den Port, auf dem der Spring Boot Server lauschen wird.
# Der Wert kann über die Umgebungsvariable 'BACKEND_PORT' überschrieben werden.
# Standardwert ist 5000, falls 'BACKEND_PORT' nicht gesetzt ist.
server.port=${BACKEND_PORT:5000}

# --- RabbitMQ Konfiguration ---
# spring.rabbitmq.host
# Der Hostname oder die IP-Adresse des RabbitMQ-Servers.
# Der Wert kann über die Umgebungsvariable 'RABBITMQ_HOST' überschrieben werden.
# Standardwert ist 'rabbitmq' (oft der Service-Name in Docker-Compose/Kubernetes).
spring.rabbitmq.host=${RABBITMQ_HOST:rabbitmq}

# spring.rabbitmq.port
# Der Port, auf dem der RabbitMQ-Server lauscht.
# Der Wert kann über die Umgebungsvariable 'RABBITMQ_PORT' überschrieben werden.
# Standardwert ist 5672 (Standard-AMQP-Port).
spring.rabbitmq.port=${RABBITMQ_PORT:5672}

# spring.rabbitmq.username
# Der Benutzername für die Authentifizierung am RabbitMQ-Server.
# Der Wert kann über die Umgebungsvariable 'RABBITMQ_USERNAME' überschrieben werden.
# Standardwert ist 'guest'.
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}

# spring.rabbitmq.password
# Das Passwort für die Authentifizierung am RabbitMQ-Server.
# Der Wert kann über die Umgebungsvariable 'RABBITMQ_PASSWORD' überschrieben werden.
# Standardwert ist 'guest'.
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

# spring.rabbitmq.addresses
# Eine durch Kommas getrennte Liste von AMQP-Broker-Adressen.
# Dies ist die vollständige Verbindungs-URI für RabbitMQ.
# Der Wert kann über die Umgebungsvariable 'BROKER_URI' überschrieben werden.
# Standardwert ist 'amqp://guest:guest@rabbitmq:5672'.
spring.rabbitmq.addresses=${BROKER_URI:amqp://guest:guest@rabbitmq:5672}

# spring.rabbitmq.prefix
# Ein Präfix, das allen RabbitMQ-Warteschlangennamen vorangestellt wird,
# die von der Anwendung erstellt oder konsumiert werden.
# Der Wert kann über die Umgebungsvariable 'AMQP_QUEUE_PREFIX' überschrieben werden.
# Standardwert ist 'kidsapp-dev-'.
spring.rabbitmq.prefix=${AMQP_QUEUE_PREFIX:kidsapp-dev-}

# spring.rabbitmq.listener.simple.queues
# Definiert die Namen der Warteschlangen, die von diesem RabbitMQ-Listener konsumiert werden sollen.
# Hier wird das zuvor definierte Präfix verwendet, um den vollständigen Warteschlangennamen zu bilden.
spring.rabbitmq.listener.simple.queues=${spring.rabbitmq.prefix}KIDS_APP_BACKEND_QUEUE

# spring.rabbitmq.listener.simple.retry.enabled
# Aktiviert oder deaktiviert die Wiederholungslogik für Nachrichtenverarbeitung im Listener.
# Wenn 'true', wird versucht, die Verarbeitung fehlgeschlagener Nachrichten zu wiederholen.
spring.rabbitmq.listener.simple.retry.enabled=true

# spring.rabbitmq.listener.simple.retry.max-attempts
# Die maximale Anzahl von Wiederholungsversuchen für eine fehlgeschlagene Nachricht.
spring.rabbitmq.listener.simple.retry.max-attempts=10

# spring.rabbitmq.listener.simple.retry.initial-interval
# Das anfängliche Intervall (in Millisekunden) zwischen den Wiederholungsversuchen.
# Dies kann in Kombination mit einer Backoff-Strategie verwendet werden.
spring.rabbitmq.listener.simple.retry.initial-interval=3000

# spring.rabbitmq.listener.simple.auto-startup
# Steuert, ob der RabbitMQ-Listener automatisch beim Start der Anwendung gestartet wird.
spring.rabbitmq.listener.simple.auto-startup=true

# --- CouchDB Konfiguration ---
# couchdb.protocol
# Das Protokoll, das für die Verbindung zur CouchDB-Instanz verwendet wird (z.B. http oder https).
# Der Wert kann über die Umgebungsvariable 'COUCHDB_PROTOCOL' überschrieben werden.
# Standardwert ist 'http'.
couchdb.protocol=${COUCHDB_PROTOCOL:http}

# couchdb.host
# Der Hostname oder die IP-Adresse des CouchDB-Servers.
# Der Wert kann über die Umgebungsvariable 'COUCHDB_HOST' überschrieben werden.
# Standardwert ist 'localhost'.
couchdb.host=${COUCHDB_HOST:localhost}

# couchdb.port
# Der Port, auf dem der CouchDB-Server lauscht.
# Der Wert kann über die Umgebungsvariable 'COUCHDB_PORT' überschrieben werden.
# Standardwert ist 5984 (Standard-CouchDB-Port).
couchdb.port=${COUCHDB_PORT:5984}

# couchdb.username
# Der Benutzername für die Authentifizierung am CouchDB-Server.
# Der Wert kann über die Umgebungsvariable 'COUCHDB_USERNAME' überschrieben werden.
# Standardwert ist 'admin'.
couchdb.username=${COUCHDB_USERNAME:admin}

# couchdb.password
# Das Passwort für die Authentifizierung am CouchDB-Server.
# Der Wert kann über die Umgebungsvariable 'COUCHDB_PASSWORD' überschrieben werden.
# Standardwert ist 'admin'.
couchdb.password=${COUCHDB_PASSWORD:admin}

# couchdb.database
# Der Name der CouchDB-Datenbank, mit der sich die Anwendung verbinden soll.
# Der Wert kann über die Umgebungsvariable 'COUCHDB_DATABASE' überschrieben werden.
# Standardwert ist 'mydb'.
couchdb.database=${COUCHDB_DATABASE:mydb}

# clear_db_on_start
# Ein benutzerdefiniertes Flag, das steuert, ob die Datenbank beim Start der Anwendung geleert wird.
# Dies ist typischerweise für Entwicklungs- oder Testumgebungen nützlich.
clear_db_on_start=true
